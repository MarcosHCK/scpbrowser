--[[
 * Copyright 2021-2025 MarcosHCK
 * This file is part of scpbrowser.
 *
 * scpbrowser is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * scpbrowser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with scpbrowser.  If not, see <http://www.gnu.org/licenses/>.
 *
 *]]
local limr = ...
local config = {}
local lgi = require ('lgi')
local macros = limr.macros

-- Keep sync
local GRESNAME = '/org/hck/scpbrowser'

do
  config.DEBUG = @DEBUG@
  config.DEVELOPER = @DEVELOPER@
  config.PACKAGE = "@PACKAGE@"
  config.PACKAGE_BUGREPORT = "@PACKAGE_BUGREPORT@"
  config.PACKAGE_NAME = "@PACKAGE_NAME@"
  config.PACKAGE_RELEASE = "@PACKAGE_RELEASE@"
  config.PACKAGE_STRING = "@PACKAGE_STRING@"
  config.PACKAGE_TARNAME = "@PACKAGE_TARNAME@"
  config.PACKAGE_URL = "@PACKAGE_URL@"
  config.PACKAGE_VERSION = "@PACKAGE_VERSION@"
  config.PACKAGE_VERSION_BUILD = "@PACKAGE_VERSION_BUILD@"
  config.PACKAGE_VERSION_MAYOR = "@PACKAGE_VERSION_MAYOR@"
  config.PACKAGE_VERSION_MICRO = "@PACKAGE_VERSION_MICRO@"
  config.PACKAGE_VERSION_MINOR = "@PACKAGE_VERSION_MINOR@"
  package.loaded.config = config
end

do
  config.links =
  {
    about = 'scp:///about',
    home = 'scp:///home',
  }

  local root = lgi.Gio.File.new_for_uri ('resource://' .. GRESNAME)

  config.resources =
  {
    root = root,
    icon = (root:get_child ('res/logo_symbolic.svg')):get_uri (),
  }
end

do
  local respath = config.resources.root:get_uri ()
  local path1 = respath .. '/lua/?.lua'
  local path2 = respath .. '/lua/?/init.lua'
  local fullpath = table.concat ({ path1, path2 }, ';')

  macros.path =
  table.concat ({macros.path, fullpath }, ';')
  local searchers = package.searchers or package.loaders

  local packconfig = {}
  local packpath = fullpath
  do
    local iterator =
    package.config:gmatch ('[^\r\n]+')

    for line in iterator do
      table.insert (packconfig, line)
    end
  end

  table.insert (searchers, function (name)
    checkArg (1, name, 'string')
    local tokenizer = ('[^%%%c]+'):format (packconfig [2]:byte ())
    local former = ('%%%c'):format (packconfig [3]:byte ())
    local messages = {}

    for match in packpath:gmatch (tokenizer) do
      local partial = name:gsub ('%.', packconfig [1])
      local path = match:gsub (former, partial)

      do
        local file = lgi.Gio.File.new_for_uri (path)
        if (file:query_exists () == true) then
          local bytes = file:load_contents ()
          return function ()
            local func, reason = load (bytes, '=' .. file:get_basename (), 'bt')
            if (not func) then
              error (reason)
            else
              return func ()
            end
          end
        else
          table.insert (messages, '\r\n\tno file ')
          table.insert (messages, file:get_uri ())
        end
      end
    end
  return (#messages > 0) and (table.concat (messages))
  end)
end
